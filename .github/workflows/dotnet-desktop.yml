name: .NET Desktop CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    runs-on: windows-latest

    env:
      # Replace with your actual solution file name.
      Solution_Name: NormalSmith.sln

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore $env:Solution_Name

      - name: Build the solution
        run: dotnet build $env:Solution_Name --configuration ${{ matrix.configuration }}

      - name: Sign the Executable (Release only)
        if: ${{ matrix.configuration == 'Release' }}
        shell: pwsh
        run: |
          Write-Host "Decoding the signing certificate..."
          $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certPath = "$(Build.SourcesDirectory)\signingCertificate.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $pfxBytes)
          
          Write-Host "Locating the executable..."
          $exePath = "$(Build.SourcesDirectory)\bin\Release\NormalSmith.exe"
          if (-Not (Test-Path $exePath)) {
            Write-Error "Executable not found at path: $exePath"
            exit 1
          }
          
          Write-Host "Signing the executable..."
          signtool sign /f $certPath /p "${{ secrets.PFX_KEY }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 $exePath
          
          Write-Host "Cleaning up certificate file..."
          Remove-Item -Path $certPath
