name: .NET Desktop CI and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [ Release ]
    runs-on: windows-latest
    env:
      Solution_Name: NormalSmith.sln
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore dependencies using MSBuild
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }} /p:UseSharedCompilation=false /p:OutDir="$env:GITHUB_WORKSPACE\build\"
        shell: pwsh

      - name: Sanitize release tag
        id: sanitize_tag
        shell: bash
        run: |
          TAG="${GITHUB_REF##*/}"
          echo "Original tag: $TAG"
          if [[ "$TAG" == v* ]]; then
            TAG="${TAG:1}"
          fi
          echo "Sanitized tag: $TAG"
          echo "sanitized_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build the solution using MSBuild
        run: msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }} /p:UseSharedCompilation=false /p:Version=${{ steps.sanitize_tag.outputs.sanitized_tag }} /p:AssemblyInformationalVersion=${{ steps.sanitize_tag.outputs.sanitized_tag }} /p:OutDir="$env:GITHUB_WORKSPACE\build\"
        shell: pwsh

      - name: Organize updater files
        shell: pwsh
        run: |
          # Create the destination folder "Updater" inside the build folder
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\build\Updater"
          # Move the updater files into the Updater folder
          Move-Item -Path "$env:GITHUB_WORKSPACE\build\NormalSmithUpdater.*" -Destination "$env:GITHUB_WORKSPACE\build\Updater\" -Force

      - name: Sign the Executables (Release only)
        if: ${{ matrix.configuration == 'Release' }}
        shell: pwsh
        run: |
          Write-Host "Decoding the signing certificate..."
          $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certPath = "$env:GITHUB_WORKSPACE\signingCertificate.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $pfxBytes)
          
          Write-Host "Listing build directory contents for debugging..."
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE\build" -Recurse
          
          # Sign the main application executable
          Write-Host "Locating the main executable..."
          $mainExePath = "$env:GITHUB_WORKSPACE\build\NormalSmith.exe"
          if (-Not (Test-Path $mainExePath)) {
            Write-Error "Main executable not found at path: $mainExePath"
            exit 1
          }
          
          # Add signtool's directory to the PATH
          $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64"
          Write-Host "Adding $signtoolPath to PATH"
          $env:PATH += ";$signtoolPath"
          
          Write-Host "Signing the main executable..."
          signtool sign /f $certPath /p "${{ secrets.PFX_KEY }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 $mainExePath
          
          # Sign the updater executable
          Write-Host "Locating the updater executable..."
          $updaterExePath = "$env:GITHUB_WORKSPACE\build\Updater\NormalSmithUpdater.exe"
          if (-Not (Test-Path $updaterExePath)) {
            Write-Error "Updater executable not found at path: $updaterExePath"
            exit 1
          }
          
          Write-Host "Signing the updater executable..."
          signtool sign /f $certPath /p "${{ secrets.PFX_KEY }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 $updaterExePath
          
          Write-Host "Cleaning up certificate file..."
          Remove-Item -Path $certPath

      - name: Compress build folder (Release only)
        if: ${{ matrix.configuration == 'Release' }}
        shell: pwsh
        run: |
          Write-Host "Compressing the build folder into build.zip..."
          Compress-Archive -Path "$env:GITHUB_WORKSPACE\build\*" -DestinationPath "$env:GITHUB_WORKSPACE\build.zip"

      - name: Upload build artifact (Release only)
        if: ${{ matrix.configuration == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ github.workspace }}/build.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get commit message
        id: commit
        shell: pwsh
        run: |
          # Retrieve the commit message for the commit associated with the tag
          $commitMessage = git log -1 --pretty=%B
          Add-Content -Path $env:GITHUB_OUTPUT -Value "commit_message=$commitMessage"

      - name: List commit titles since last release
        id: commit_titles
        shell: bash
        run: |
          # Force fetch all tags to update local tags.
          git fetch --tags --force
          # Try to find the previous tag (skip the current one)
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          echo "Previous tag: $PREV_TAG"
          if [ -z "$PREV_TAG" ]; then
            # No previous tag found, list all commits as markdown links and filter out unwanted titles.
            COMMITS=$(git log --pretty=format:"* [%s](https://github.com/LiftVortex/NormalSmith/commit/%H)" | grep -v -e "Update dotnet-desktop.yml" -e "Update README.md" || true)
          else
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"* [%s](https://github.com/LiftVortex/NormalSmith/commit/%H)" | grep -v -e "Update dotnet-desktop.yml" -e "Update README.md" || true)
          fi
          echo "Commit titles with links:"
          echo "$COMMITS"
          echo "commit_titles<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ${{ github.workspace }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          prerelease: ${{ endsWith(github.ref, 'p') }}
          body: |
            ### Overview
            ${{ steps.commit_titles.outputs.commit_titles }}

            ### Instructions
            - Download NormalSmith-Build.zip
            - Open NormalSmith.exe

            ### Requirements
            - [.NET 8.0 Desktop Runtime](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-desktop-8.0.13-windows-x64-installer)

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/build.zip
          asset_name: NormalSmith-Build.zip
          asset_content_type: application/zip

